#include <stdio.h>
#include <linux/types.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <termios.h>
#include <pthread.h>

#define     UART_ERR_OPEN_FAIL      -1
#define     UART_ERR_CONFIG_FAIL    -2

#define BUFFER_SIZE 128
#define HOST_COM_PORT 2
#define MAX_COM_NUM 3
#define GENERAL 1
#define USBTTY 0
#define COM_TYPE 1

#define	UART_BUFFER_MAX_SIZE	512
#define	UART_WR_BUFFER_MAX_SIZE	(30*1024)
#define	UART_DATA_BUFFER_MAX_SIZE	(UART_BUFFER_MAX_SIZE >> 3)

#define	UART_CAP_PROTOCOL_TAIL	'~'
#define	UART_CAP_PROTOCOL_HEAD	"AA"
#define	UART_CAP_PROTOCOL_TYPE1	'&'
#define	UART_CAP_PROTOCOL_TYPE2	'H'
#define	UART_CAP_PROTOCOL_UP		"UP"
#define	UART_CAP_PROTOCOL_DOWN	"DOWN"

#define	UART_CAP_SEND_PHOTO_REQ		1
#define	UART_CAP_READY_TO_RECV		2
#define	UART_CAP_NOT_READY_TO_RECV	3
#define	UART_CAP_DATA_BUF_NULL		-1
#define	UART_CAP_DATA_BYTE_OVERLOV	-2
#define	UART_CAP_CHECK_SUM_ERR		-3
#define	UART_CAP_INVALID_PROTOCOL	-5

#define Printf(string...)	\
do{\
	printf("%s(%d)[%s]: ", __FILE__, __LINE__, __FUNCTION__);\
	printf(string);\
} while(0)

typedef enum{
    UART_0  =   0,
    UART_1,
    UART_2,
    UART_NUM
}UART_ID;

typedef struct{
    int UartID;
    int BaundRate;
    int DataBite;
    int Parity;
    int StopBite;
}UART_CONFIG;

#pragma pack(push)
#pragma pack(1)

typedef struct _DATA_STR
{
	char* datastr;
	int datastrlen;
}DATA_STR;

typedef struct _UART_CAP_PROTOCOL_FORMAT
{
	const char* headstr;
	char databytes;
	char datatype;
	DATA_STR datastring;
	char checksum;
	const char* tailstr;
}UART_CAP_PROTOCOL_FORMAT;


typedef struct _UART_CAP_WRITE_
{
	char* wrbuf;
	int*	wrbufsize;
	int 	rewritetimes;
	volatile char rewriteover;
}UART_CAP_WRITE;	

#pragma pack(pop)


UART_CAP_PROTOCOL_FORMAT UartCapBuffer;
UART_CAP_WRITE	UartWriteBufPointer;
const char tail = UART_CAP_PROTOCOL_TAIL;
int uart_fd = 0;
char	UartBuffer[UART_BUFFER_MAX_SIZE];
int UartBufferIndex = 0;

char UartWriteBuffer[UART_WR_BUFFER_MAX_SIZE];
int UartWriteBufindex = 0;

char UartDataBuf[UART_DATA_BUFFER_MAX_SIZE];
int UartDataBufindex = 0;

int open_port(int com_port)
{
    int fd;
#if (COM_TYPE == GENERAL)
    char *dev[] = {"/dev/ttySGK0", "/dev/ttySGK1", "/dev/ttySGK2"};
#else
    char *dev[] = {"/dev/ttyUSB0", "/dev/ttyUSB1", "/dev/ttyUSB2"};
#endif

    if((com_port < 0) || (com_port > (MAX_COM_NUM - 1)))
    {
        return -1;
    }

    fd = open(dev[com_port], O_RDWR|O_NOCTTY|O_NDELAY);
    printf("Open the %s fd is %d\n", dev[com_port], fd);
    if(fd < 0)
    {
        perror("Open serial port");
        return -1;
    }

    //Set  the  file  status flags to blocking
    if(fcntl(fd, F_SETFL, 0) < 0)
    {
        perror("fcntl F_SETFL\n");
    }

    //test whether a file descriptor refers to a terminal
    if(isatty(fd) == 0)
    {
        perror("This is not a termial device");
    }
    return fd;
}

int set_com_config(int fd, int baud_rate, int data_bits, char parity, int stop_bits)
{
    printf("The fd is %d The baud_rate is %d data_bits is %d, parity is %c, stop_bits is %d\n",\
           fd, baud_rate, data_bits, parity, stop_bits);
           
    struct termios new_cfg, old_cfg;
    int speed = B115200;

    //gets the parameters associated with the object referred by fd
    if(tcgetattr(fd, &old_cfg) != 0)
    {
        perror("tcgetattr");
        return -1;
    }
    
    new_cfg = old_cfg;
    //sets the terminal to something like the "raw" mode of the old Version 7 terminal driver
    cfmakeraw(&new_cfg);
    new_cfg.c_cflag &= ~CSIZE;

    switch(baud_rate)
    {
        case 2400:
        {
            printf("baud_rate 2400 %d\n", speed);
            speed = B2400;
        }
        break;

        case 4800:
        {
            speed = B4800;
            printf("baud_rate 4800 %d\n", speed);
        }
        break;
        
        case 9600:
        {
            speed = B9600;
            printf("baud_rate 9600 %d\n", speed);
        }
        break;
        
        case 19200:
        {
            speed = B19200;
            printf("baud_rate 19200 %d\n", speed);
        }
        break;
        
        case 38400:
        {
            speed = B38400;
            printf("baud_rate 38400 %d\n", speed);
        }
        break;
        
        case 115200:
        {
            speed = B115200;
            printf("baud_rate 115200 %d\n", speed);
        }
        break;
        
        default:
            speed = B115200;
            break;
    }

    //sets  the  input  baud rate
    cfsetispeed(&new_cfg, speed);
    //sets the output baud rate
    cfsetospeed(&new_cfg, speed);
    printf("speed = %d\n", speed);

    switch(data_bits)
    {
        case 7:
        {
            new_cfg.c_cflag |= CS7;
        }
        break;
        
        case  8:
        {
            new_cfg.c_cflag |= CS8;
            printf("data_bits 8\n");
        }
        break;

        default:
            new_cfg.c_cflag |= CS8;
            break;
    }

    switch(parity)
    {
        case 'n':
        case 'N':
        {
            printf("parity: No\n");
            new_cfg.c_cflag &= ~PARENB;
            new_cfg.c_iflag &= ~INPCK;
        }
        break;
        
        case 'o':
        case 'O':
        {
            new_cfg.c_cflag |= (PARODD | PARENB);
            new_cfg.c_iflag |= INPCK;
        }
        break;

        case 'e':
        case 'E':
        {
            new_cfg.c_cflag |= PARENB;
            new_cfg.c_cflag &= ~PARODD;
            new_cfg.c_iflag |= INPCK;
        }
        break;
        
        case 's':
        case 'S':
        {
            new_cfg.c_cflag &= ~PARENB;
            new_cfg.c_cflag &= ~CSTOPB;
        }
        break;
        
        default:
            new_cfg.c_cflag &= ~PARENB;
            new_cfg.c_iflag &= ~INPCK;
            break;
    }
    
    switch(stop_bits)
    {
        case 1:
        {
            printf("stop_bits 1\n");
            new_cfg.c_cflag &= ~CSTOPB;
        }
        break;
        
        case 2:
        {
            new_cfg.c_cflag |= CSTOPB;
        }
        break;
        
        default:
            new_cfg.c_cflag &= ~CSTOPB;
            break;
    }

    new_cfg.c_cc[VTIME] = 0;
    new_cfg.c_cc[VMIN] = 1;
    //discards data written to the object referred to by fd but not transmitted
    tcflush(fd , TCIFLUSH);
    //the change occurs immediately.
    if((tcsetattr(fd, TCSANOW, &new_cfg)) != 0)
    {
        perror("tcsetattr");
        return -1;
    }
    return 0;
}

int gk_open_com_port(UART_CONFIG uart_config)
{
    signed int fd = 0;

    fd = open_port(uart_config.UartID);
    if(fd == -1)
    {
        return UART_ERR_OPEN_FAIL;
    }

    if(set_com_config(fd,uart_config.BaundRate,uart_config.DataBite,uart_config.Parity,uart_config.StopBite) == -1)
    {
        return UART_ERR_CONFIG_FAIL;
    }

    return fd;
}

int gk_read_com_port(signed int fd,char *read_buf,int read_size)
{
    fd_set fds,rd_fds,wr_fds;
    signed int ret = 0;
    struct timeval tv;
    signed int read_real_size = 0;

    FD_ZERO(&fds);
    //add a given file descriptor to a set
    FD_SET(fd,&fds);

    rd_fds = fds;
    wr_fds = fds;
    tv.tv_sec = 10;
    tv.tv_usec = 0;
    //monitor if one or more of fds become 'ready'
    ret = select(fd+1,&rd_fds,NULL,NULL,&tv);

    if(ret == 0) 
        return 0;
        
    else if(ret < 0)
    {
        perror("select err\n");
        return -1;
    }
    else
    {
        if(FD_ISSET(fd,&rd_fds))
        {
            read_real_size = read(fd,read_buf,read_size);
            if(read_real_size < 0)
            {
                return -1;
            }
            return read_real_size;
        }
        else
        {
            return 0;
        }
    }
}

int SetPthreadStackSize(pthread_attr_t * attr, int stacksize)
{
    int pret = -1;

    pret = pthread_attr_init(attr);
    if (pret != 0)
    {
        return -1;
    }

    pret = pthread_attr_setstacksize(attr, stacksize);
    if (pret != 0)
    {
        return -1;
    }

    return 0;
}

int gk_write_com_port(signed int fd,char* write_buf,int write_size)
{
    fd_set fds,rd_fds,wr_fds;
    signed int ret = 0;
    struct timeval tv;
    signed int write_real_size = 0;

    FD_ZERO(&fds);
    FD_SET(fd,&fds);

    rd_fds = fds;
    wr_fds = fds;
    tv.tv_sec = 10;
    tv.tv_usec = 0;
    ret = select(fd+1,NULL,&wr_fds,NULL,&tv);

    if(ret == 0) return 0;
    else if(ret < 0)
    {
        perror("select err\n");
        return -1;
    }
    else
    {
        if(FD_ISSET(fd,&wr_fds))
        {
            write_real_size = write(fd,write_buf,write_size);
            if(write_real_size < 0)
            {
                return -1;
            }
            return write_real_size;
        }
        else
        {
            return 0;
        }
    }

}

void* UartCap_ServicePthread(void* arg)
{
    int ret = 0;
    char datastr[32];

    while(1)
    {
        int real_read_size = 0;
        int real_write_size = 0;
        
        real_read_size = gk_read_com_port(uart_fd, UartBuffer+UartBufferIndex, UART_BUFFER_MAX_SIZE);
        if(real_read_size < 0)
        {
            Printf("Read Uart Port Fail \n");
            continue;
        }
                    
        int i=0;            
        for(i=0; i<real_read_size; i++)
        {
            //printf("%x \n", UartBuffer[UartBufferIndex+i]);
            printf("%x \n", UartBuffer[UartBufferIndex+i]);
        }

        //need to delay for a while between read & write
        usleep(1 * 1000);
        real_write_size = gk_write_com_port(uart_fd, UartBuffer+UartBufferIndex, real_read_size);
        if(real_write_size < 0)
        {
            Printf("Write uart data fail \n");
            sleep(1);
            continue;
        }

        //if (real_read_size>0 && UartBufferIndex%8)
          //  printf("\n");
        
        UartBufferIndex += real_read_size;
#ifdef debug
        if(UartBufferIndex >3)
        {
            if(strcmp(UartBuffer + UartBufferIndex -4,"hello") == 0)
            {
                UartCapBuffer.databytes = 8;
                UartCapBuffer.datatype = '&';
                snprintf(datastr,32,"%d%c",30720,'\0');
                UartCapBuffer.datastring.datastr = datastr;
                UartCapBuffer.datastring.datastrlen = strlen(datastr);
                if(UartCapProtocolCheckSumCalc(&UartCapBuffer) < 0)
                {
                    Printf("Uart cap check sum fail \n");
                    UartBufferIndex = 0;
                    continue;
                }
                UartDataBufindex = UartCapProtocolDataReady(UartDataBuf,UART_DATA_BUFFER_MAX_SIZE,
                                   &UartCapBuffer);
                if(UartDataBufindex < 0)
                {
                    Printf("Ready uart write data fail \n");
                    UartBufferIndex = 0;
                    continue;
                }
                UartWriteBufPointer.rewritetimes = 0;
                while(UartWriteBufPointer.rewriteover == 0)
                {
                    usleep(100*1000);
                }
                UartWriteBufPointer.wrbuf = UartDataBuf;
                UartWriteBufPointer.wrbufsize = &UartDataBufindex;
                UartWriteBufPointer.rewritetimes = 3;
            }
        }
#endif

        if(UartBufferIndex >= UART_BUFFER_MAX_SIZE)
        {
            Printf("UartBuffer OverLow \n");
            UartBufferIndex = 0;
            continue;
        }

#if 0
        if(UartBuffer[UartBufferIndex -1] == UART_CAP_PROTOCOL_TAIL)
        {
            ret = UartCapProtocolAnalysis(UartBuffer,UartBufferIndex);
            switch(ret)
            {
                case UART_CAP_SEND_PHOTO_REQ:
                {
                    UartCapBuffer.databytes = 8;
                    UartCapBuffer.datatype = 'H';
                    snprintf(datastr,32,"%d%c",30720,'\0');
                    UartCapBuffer.datastring.datastr = datastr;
                    UartCapBuffer.datastring.datastrlen = strlen(datastr);
                    if(UartCapProtocolCheckSumCalc(&UartCapBuffer) < 0)
                    {
                        Printf("Uart cap check sum fail \n");
                        UartBufferIndex = 0;
                        continue;
                    }
                    UartDataBufindex = UartCapProtocolDataReady(UartDataBuf,UART_DATA_BUFFER_MAX_SIZE,
                                       &UartCapBuffer);
                    if(UartDataBufindex < 0)
                    {
                        Printf("Ready uart write data fail \n");
                        UartBufferIndex = 0;
                        continue;
                    }
                    UartWriteBufPointer.rewritetimes = 0;
                    while(UartWriteBufPointer.rewriteover == 0)
                    {
                        usleep(100*1000);
                    }
                    UartWriteBufPointer.wrbuf = UartDataBuf;
                    UartWriteBufPointer.wrbufsize = &UartDataBufindex;
                    UartWriteBufPointer.rewritetimes = 3;
                    break;
                }
                
                case UART_CAP_READY_TO_RECV:
                {
                    UartWriteBufPointer.rewritetimes = 0;
                    while(UartWriteBufPointer.rewriteover == 0)
                    {
                        usleep(100*1000);
                    }
                    int photo_fd = open("/debug.jpg",O_RDONLY);
                    if(photo_fd < 0)
                    {
                        Printf("open photo fail \n");
                        memset(UartWriteBuffer,'a',UART_WR_BUFFER_MAX_SIZE);
                    }
                    else
                    {
                        UartWriteBufindex = read(photo_fd,UartWriteBuffer,UART_WR_BUFFER_MAX_SIZE);
                        if(UartWriteBufindex < 0)
                        {
                            Printf("read photo fail \n");
                            memset(UartWriteBuffer,'a',UART_WR_BUFFER_MAX_SIZE);
                        }
                    }

                    UartWriteBufPointer.wrbuf = UartWriteBuffer;
                    UartWriteBufPointer.wrbufsize = &UartWriteBufindex;
                    UartWriteBufPointer.rewritetimes = 3;
                    break;
                }
                
                case UART_CAP_NOT_READY_TO_RECV:
                {
                    UartWriteBufPointer.rewritetimes = 0;
                    while(UartWriteBufPointer.rewriteover == 0)
                    {
                        usleep(100*1000);
                    }
                    UartWriteBufPointer.wrbuf = UartDataBuf;
                    UartWriteBufPointer.wrbufsize = &UartDataBufindex;
                    UartWriteBufPointer.rewritetimes = 3;
                    break;
                }
                
                default:
                    break;
            }
            UartBufferIndex = 0;
        }
        else
        {
            continue;
        }
#endif

    }

    gk_close_com_port(uart_fd);
}


void* UartCap_writePthread(void* arg)
{
    int real_write_size = 0;
    char datastr[32];

    while(1)
    {
     #if 0   
        if(UartWriteBufPointer.rewritetimes)
        {
            if(UartWriteBufPointer.wrbuf == NULL || UartWriteBufPointer.wrbufsize == NULL)
            {
                UartWriteBufPointer.rewritetimes = 0;
                sleep(1);
                continue;
            }
            UartWriteBufPointer.rewriteover = 0;
            real_write_size = gk_write_com_port(uart_fd, UartDataBuf, UartDataBufindex);
            if(real_write_size < 0)
            {
                Printf("Write uart data fail \n");
                sleep(1);
                continue;
            }
            UartWriteBufPointer.rewriteover = 1;
            UartWriteBufPointer.rewritetimes --;
            Printf("Shut Up Down Ready to Write %d \n",UartWriteBufPointer.rewritetimes);
        }
        #endif
        sleep(1);
    }
}

int main(void)
{
    pthread_t pid, pidwr;
    pthread_attr_t attr;
    int ret;
    
    UART_CONFIG uart_cfg =
    {
        .UartID = UART_1,
        .BaundRate = 115200,
        .DataBite = 8,
        .Parity = 'N',
        .StopBite = 1
    };

    UartCapBuffer.headstr = UART_CAP_PROTOCOL_HEAD;
    UartCapBuffer.tailstr = &tail;

    uart_fd = gk_open_com_port(uart_cfg);
    if(uart_fd > 0)
    {
        Printf("open uart port successful \n");
    }
    else
    {
        Printf("open uart port fail fd = %d \n",uart_fd);
        return -1;
    }

    SetPthreadStackSize(&attr, 500000);
    ret = pthread_create(&pid, &attr, UartCap_ServicePthread, NULL);
    if (ret < 0)
    {
        Printf("UartCap_ServicePthread err!\n");
        return -1;
    }

#if 0

    ret = pthread_create(&pidwr, &attr, UartCap_writePthread, NULL);
    if (ret < 0)
    {
        Printf("UartCap_RewritePthread err!\n");
        return -1;
    }
#endif

    while(1);
    
    return 0;

}
